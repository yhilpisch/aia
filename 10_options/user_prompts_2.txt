I want to create a Python package to flexibly price European and American options with arbitrary payoffs based on Monte Carlo simulation. The package shall be orthogonal and shall separate core functionalities in separate files/modules. The valuation shall primarily be done through MCS. Provide a concise outline and structure for the implementation of this project.

Write the outline in markdown in a new file outline.md.

Start with the first implementations so that we can value plain vanilla European put and call options in the BSM 1973 models.

No, don't do that â€” stop for now.

When executing Python code, use "python" instead of "python3". Implement a script that benchmarks the European option pricing based on Monte Carlo against the analytical BSM 1973 values.

Update the benchmark to include for both options ATM/ITM cases. Present the results in a table. Including absolute and % valuation errors in each case.

Also add the respective OTM cases.

Now add the pricing of American options to the package. For the benchmarking of the ATM/ITM/OTM option generate benchmark values based on the CRR 1979 binomial option pricing model.

You should implement a benchmark for the European options prices against the analytical ones AND for the American options prices from MCS against the American option values from the CRR 1979 model. In both cases for puts and calls ATM/ITM/OTM.

Now add as an additional model for simulating paths the Merton jump diffusion model.

For the benchmarking of the jump diffusion model, implement pricing formulas for that model based on the characteristic function. Amend the benchmarking file to include bencharks for European put/call ATM/ITM/OTM options in that model.

I have renamed the benchmarking file to just benchmark.py. Now add the Heston stochastic volatility model for simulation and pricing. And add the semi-analytical formula for European options in that model so that European put/call prices can be benchmarked as before. Adjust the benchmark.py file accordingly.

Separate the (semi-)analytical formulae from the benchmark.py script into separate scripts in the pricing package. Also correct the following: /Users/yves/Dropbox/Program/cpf/57_ai_assistants/git/10_session/scripts/benchmark.py:138: DeprecationWarning: `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.

benchmark.py still includes the analytical pricing functions.

Now add the functionality that allows the definition of custom, maybe quite complex, option payoffs. Get started with path-dependent options, such as Asian/lookback options. Focus on European exercise first. Create a new test script which values different types of such options and show ATM/ITM/OTM results.

When running the original benchmark.py script, the following happens:   File "/Users/yves/Dropbox/Program/cpf/57_ai_assistants/git/10_session/option_pricing/payoffs.py", line 17, in __call__
    S_end = S[:, -1] if S.ndim == 2 else S

